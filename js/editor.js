// –†–ï–î–ê–ö–¢–û–† –î–ê–ù–ù–´–• –í –ë–†–ê–£–ó–ï–†–ï
const editor = {
    isEditingMilestones: false,
    currentEditingClass: null,
    currentEditingBranch: null,

    init() {
        this.loadAll();
        this.setupAutoSave();
        this.setupMilestoneEditor();
    },

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
    loadAll() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å—ã
        document.getElementById('classesEditor').value = JSON.stringify(classesData, null, 2);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ö–∏
        document.getElementById('milestonesEditor').value = JSON.stringify(milestonesData, null, 2);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('settingsEditor').value = JSON.stringify(milestonesData.settings, null, 2);
        
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä');
    },

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    saveAll() {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å—ã
            const newClassesData = JSON.parse(document.getElementById('classesEditor').value);
            Object.assign(classesData, newClassesData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ö–∏
            const newMilestonesData = JSON.parse(document.getElementById('milestonesEditor').value);
            Object.assign(milestonesData, newMilestonesData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const newSettings = JSON.parse(document.getElementById('settingsEditor').value);
            Object.assign(milestonesData.settings, newSettings);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            calculator.createClassButtons();
            ui.updateMaxPoints();
            
            if (calculator.currentClass) {
                calculator.renderBranches();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–µ—Ö –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if (this.isEditingMilestones) {
                this.renderMilestoneEditor();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            this.saveToLocalStorage();
            
            alert('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
            
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: ' + error.message);
        }
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤–µ—Ö
    setupMilestoneEditor() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const editorControls = document.querySelector('.editor-controls');
        const editMilestonesBtn = document.createElement('button');
        editMilestonesBtn.className = 'editor-btn';
        editMilestonesBtn.textContent = 'üéØ –†–µ–¥–∞–∫—Ç–æ—Ä –≤–µ—Ö';
        editMilestonesBtn.onclick = () => this.toggleMilestoneEditor();
        editorControls.appendChild(editMilestonesBtn);
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ö
    toggleMilestoneEditor() {
        this.isEditingMilestones = !this.isEditingMilestones;
        
        if (this.isEditingMilestones) {
            this.showMilestoneEditor();
        } else {
            this.hideMilestoneEditor();
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–µ—Ö
    showMilestoneEditor() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤–µ—Ö
        const modal = document.createElement('div');
        modal.id = 'milestoneEditorModal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            z-index: 10000;
            display: flex;
            flex-direction: column;
            padding: 20px;
            overflow-y: auto;
        `;

        modal.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2 style="color: white;">üéØ –†–µ–¥–∞–∫—Ç–æ—Ä –≤–µ—Ö</h2>
                <button onclick="editor.hideMilestoneEditor()" style="
                    background: #f72585;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 5px;
                    cursor: pointer;
                ">‚úï –ó–∞–∫—Ä—ã—Ç—å</button>
            </div>

            <div style="display: grid; grid-template-columns: 300px 1fr; gap: 20px; flex: 1;">
                <!-- –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ -->
                <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px;">
                    <h3 style="color: #4cc9f0; margin-bottom: 15px;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É</h3>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="color: white; display: block; margin-bottom: 5px;">–ö–ª–∞—Å—Å:</label>
                        <select id="editorClassSelect" style="width: 100%; padding: 10px; border-radius: 5px; background: #2d3748; color: white; border: 1px solid #4a5568;">
                            ${Object.keys(milestonesData.classes).map(cls => `
                                <option value="${cls}">${classesData[cls]?.name || cls}</option>
                            `).join('')}
                        </select>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="color: white; display: block; margin-bottom: 5px;">–í–µ—Ç–∫–∞ –≤–µ—Ö:</label>
                        <select id="editorBranchSelect" style="width: 100%; padding: 10px; border-radius: 5px; background: #2d3748; color: white; border: 1px solid #4a5568;">
                        </select>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="color: white; display: block; margin-bottom: 5px;">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏:</label>
                        <input type="text" id="editorBranchName" style="width: 100%; padding: 10px; border-radius: 5px; background: #2d3748; color: white; border: 1px solid #4a5568;">
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="color: white; display: block; margin-bottom: 5px;">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                        <textarea id="editorBranchDesc" style="width: 100%; height: 80px; padding: 10px; border-radius: 5px; background: #2d3748; color: white; border: 1px solid #4a5568; resize: vertical;"></textarea>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <button onclick="editor.addNewBranch()" style="width: 100%; padding: 12px; background: #4361ee; color: white; border: none; border-radius: 5px; cursor: pointer; margin-bottom: 10px;">
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
                        </button>
                        <button onclick="editor.deleteCurrentBranch()" style="width: 100%; padding: 12px; background: #f72585; color: white; border: none; border-radius: 5px; cursor: pointer;">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
                        </button>
                    </div>

                    <div style="background: rgba(255,255,255,0.05); padding: 15px; border-radius: 5px;">
                        <h4 style="color: #4cc9f0; margin-bottom: 10px;">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
                        <p style="color: white; font-size: 12px; line-height: 1.4;">
                            ‚Ä¢ <strong>–ö–ª–∏–∫</strong> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–µ—Ç–∫—É<br>
                            ‚Ä¢ <strong>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏</strong> - —Å–µ—Ä—ã–µ, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞<br>
                            ‚Ä¢ <strong>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ [4,4]</strong> - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è (–Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å)<br>
                            ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        </p>
                    </div>
                </div>

                <!-- –°–µ—Ç–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
                <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; display: flex; flex-direction: column; align-items: center;">
                    <h3 id="editorGridTitle" style="color: white; margin-bottom: 20px;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                    <div id="milestoneEditorGrid" style="display: grid; grid-template-columns: repeat(9, 40px); grid-template-rows: repeat(9, 40px); gap: 2px; margin-bottom: 20px;">
                        <!-- –°–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                    <div style="color: white; font-size: 14px;">
                        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫: <span id="disabledCount">0</span>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        document.getElementById('editorClassSelect').addEventListener('change', () => this.updateBranchSelect());
        document.getElementById('editorBranchSelect').addEventListener('change', () => this.renderMilestoneEditor());
        document.getElementById('editorBranchName').addEventListener('input', () => this.updateBranchData());
        document.getElementById('editorBranchDesc').addEventListener('input', () => this.updateBranchData());
        
        this.updateBranchSelect();
        this.renderMilestoneEditor();
    },

    // –°–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–µ—Ö
    hideMilestoneEditor() {
        const modal = document.getElementById('milestoneEditorModal');
        if (modal) {
            modal.remove();
        }
        this.isEditingMilestones = false;
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –≤–µ—Ç–æ–∫
    updateBranchSelect() {
        const classSelect = document.getElementById('editorClassSelect');
        const branchSelect = document.getElementById('editorBranchSelect');
        const selectedClass = classSelect.value;
        
        branchSelect.innerHTML = '';
        
        if (milestonesData.classes[selectedClass]) {
            milestonesData.classes[selectedClass].forEach((branch, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = `${branch.name} (${branch.disabledCells.length} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)`;
                branchSelect.appendChild(option);
            });
        }
        
        this.currentEditingClass = selectedClass;
        this.currentEditingBranch = branchSelect.value;
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–µ—Ç–∫–∏
    renderMilestoneEditor() {
        const classId = document.getElementById('editorClassSelect').value;
        const branchIndex = document.getElementById('editorBranchSelect').value;
        const grid = document.getElementById('milestoneEditorGrid');
        const title = document.getElementById('editorGridTitle');
        
        if (!classId || branchIndex === '') {
            grid.innerHTML = '<div style="color: white; text-align: center;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>';
            return;
        }
        
        const branch = milestonesData.classes[classId][branchIndex];
        this.currentEditingClass = classId;
        this.currentEditingBranch = parseInt(branchIndex);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById('editorBranchName').value = branch.name;
        document.getElementById('editorBranchDesc').value = branch.desc;
        
        title.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${branch.name}`;
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
        grid.innerHTML = '';
        
        for (let i = 0; i < 9; i++) {
            for (let j = 0; j < 9; j++) {
                const cell = document.createElement('div');
                cell.style.cssText = `
                    width: 40px;
                    height: 40px;
                    background: #4a5568;
                    border: 2px solid #718096;
                    border-radius: 4px;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 12px;
                    font-weight: bold;
                    transition: all 0.2s;
                `;
                
                const isStart = (i === 4 && j === 4);
                const isDisabled = branch.disabledCells.some(([x, y]) => x === i && y === j);
                
                if (isStart) {
                    cell.style.background = '#4cc9f0';
                    cell.style.borderColor = '#4cc9f0';
                    cell.textContent = 'üéØ';
                } else if (isDisabled) {
                    cell.style.background = '#2d3748';
                    cell.style.borderColor = '#718096';
                    cell.style.opacity = '0.4';
                    cell.textContent = '‚ùå';
                } else {
                    cell.textContent = '‚úì';
                    cell.style.color = '#90ee90';
                }
                
                if (!isStart) {
                    cell.addEventListener('click', () => this.toggleCell(i, j));
                }
                
                cell.setAttribute('data-tooltip', `–ü–æ–∑–∏—Ü–∏—è: [${i},${j}]${isStart ? ' (–°—Ç–∞—Ä—Ç)' : ''}${isDisabled ? ' (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)' : ''}`);
                cell.addEventListener('mouseenter', ui.showTooltip.bind(ui));
                cell.addEventListener('mouseleave', ui.hideTooltip.bind(ui));
                
                grid.appendChild(cell);
            }
        }
        
        this.updateDisabledCount();
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    toggleCell(row, col) {
        if (this.currentEditingClass === null || this.currentEditingBranch === null) return;
        
        const branch = milestonesData.classes[this.currentEditingClass][this.currentEditingBranch];
        const cellIndex = branch.disabledCells.findIndex(([x, y]) => x === row && y === col);
        
        if (cellIndex === -1) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            branch.disabledCells.push([row, col]);
        } else {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            branch.disabledCells.splice(cellIndex, 1);
        }
        
        this.renderMilestoneEditor();
        this.saveToLocalStorage();
        this.updateBranchSelect(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
    updateDisabledCount() {
        if (this.currentEditingClass === null || this.currentEditingBranch === null) return;
        
        const branch = milestonesData.classes[this.currentEditingClass][this.currentEditingBranch];
        document.getElementById('disabledCount').textContent = branch.disabledCells.length;
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
    updateBranchData() {
        if (this.currentEditingClass === null || this.currentEditingBranch === null) return;
        
        const branch = milestonesData.classes[this.currentEditingClass][this.currentEditingBranch];
        branch.name = document.getElementById('editorBranchName').value;
        branch.desc = document.getElementById('editorBranchDesc').value;
        
        this.saveToLocalStorage();
        this.updateBranchSelect(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
    },

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
    addNewBranch() {
        const classId = document.getElementById('editorClassSelect').value;
        
        if (!milestonesData.classes[classId]) {
            milestonesData.classes[classId] = [];
        }
        
        const newBranch = {
            name: "–ù–æ–≤–∞—è –≤–µ—Ç–∫–∞",
            desc: "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏",
            disabledCells: []
        };
        
        milestonesData.classes[classId].push(newBranch);
        
        this.saveToLocalStorage();
        this.updateBranchSelect();
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
        const branchSelect = document.getElementById('editorBranchSelect');
        branchSelect.value = milestonesData.classes[classId].length - 1;
        this.renderMilestoneEditor();
    },

    // –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    deleteCurrentBranch() {
        const classId = document.getElementById('editorClassSelect').value;
        const branchIndex = document.getElementById('editorBranchSelect').value;
        
        if (milestonesData.classes[classId] && milestonesData.classes[classId][branchIndex]) {
            if (confirm(`–£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É "${milestonesData.classes[classId][branchIndex].name}"?`)) {
                milestonesData.classes[classId].splice(branchIndex, 1);
                
                this.saveToLocalStorage();
                this.updateBranchSelect();
                this.renderMilestoneEditor();
            }
        }
    },

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞
    saveToLocalStorage() {
        const saveData = {
            classes: classesData,
            milestones: milestonesData,
            timestamp: new Date().toISOString()
        };
        localStorage.setItem('allodsCalculatorData', JSON.stringify(saveData));
    },

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    loadFromLocalStorage() {
        const saved = localStorage.getItem('allodsCalculatorData');
        if (saved) {
            try {
                const saveData = JSON.parse(saved);
                Object.assign(classesData, saveData.classes);
                Object.assign(milestonesData, saveData.milestones);
                this.loadAll();
                console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage');
            }
        }
    },

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    setupAutoSave() {
        const editors = ['classesEditor', 'milestonesEditor', 'settingsEditor'];
        editors.forEach(editorId => {
            const editor = document.getElementById(editorId);
            editor.addEventListener('input', () => {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
            });
        });
    },

    // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º (–∏–∑ —Ñ–∞–π–ª–æ–≤)
    resetToDefault() {
        if (confirm('–í–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.')) {
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
            location.reload();
        }
    },

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ñ–∞–π–ª
    exportData() {
        const data = {
            classes: classesData,
            milestones: milestonesData,
            exportDate: new Date().toISOString()
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'allods-calculator-data.json';
        a.click();
        URL.revokeObjectURL(url);
    },

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    importData(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const importedData = JSON.parse(e.target.result);
                    Object.assign(classesData, importedData.classes);
                    Object.assign(milestonesData, importedData.milestones);
                    this.loadAll();
                    this.saveToLocalStorage();
                    alert('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
                } catch (error) {
                    alert('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
            };
            reader.readAsText(file);
        }
    }
};
