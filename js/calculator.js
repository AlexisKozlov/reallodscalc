// –õ–û–ì–ò–ö–ê –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
const calculator = {
    currentClass: null,
    talentPoints: 0,
    milestonePoints: 0,
    selectedTalents: {},
    selectedMilestones: {},

    init() {
        this.createClassButtons();
        ui.updateMaxPoints();
    },

    createClassButtons() {
        const container = document.getElementById('classButtons');
        container.innerHTML = '';
        
        for (const classId in classesData) {
            const btn = document.createElement('button');
            btn.className = 'class-btn';
            btn.textContent = classesData[classId].name;
            btn.addEventListener('click', () => this.selectClass(classId));
            container.appendChild(btn);
        }
    },

    selectClass(classId) {
        this.currentClass = classId;
        this.talentPoints = 0;
        this.milestonePoints = 0;
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –≤–µ—Ö–∏
        this.selectedTalents = {};
        this.selectedMilestones = {};
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–µ—Ö–∏ (—Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö req: [])
        if (milestonesData.classes[classId]) {
            milestonesData.classes[classId].forEach((branch) => {
                branch.milestones.forEach(milestone => {
                    if (milestone.req.length === 0) {
                        this.selectedMilestones[milestone.id] = true;
                        this.milestonePoints++;
                    }
                });
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        document.querySelectorAll('.class-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        event.target.classList.add('active');
        
        this.renderBranches();
        ui.updatePoints();
        this.updateBuildCode();
    },

    renderBranches() {
        if (!this.currentClass) return;
        
        const container = document.getElementById('branchesContainer');
        container.innerHTML = '';
        
        const classData = classesData[this.currentClass];
        const milestoneData = milestonesData.classes[this.currentClass] || [];

        // –í–µ—Ç–∫–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤
        const talentBranch = document.createElement('div');
        talentBranch.className = 'talent-branch';
        talentBranch.innerHTML = '<h3>üéØ –¢–∞–ª–∞–Ω—Ç—ã</h3>';
        
        classData.talents.forEach((rowData, rowIndex) => {
            const rowDiv = document.createElement('div');
            rowDiv.className = 'talent-row';
            
            rowData.talents.forEach(talent => {
                const talentDiv = document.createElement('div');
                talentDiv.className = 'talent';
                const currentLevel = this.selectedTalents[talent.id] || 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
                const isRowLocked = !this.isRowAvailable(rowIndex);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–∞–ª–∞–Ω—Ç–∞
                const isTalentLocked = talent.req.length > 0 && !talent.req.every(req => this.selectedTalents[req] > 0);
                
                if (currentLevel > 0) talentDiv.classList.add('active');
                if (isRowLocked || isTalentLocked) talentDiv.classList.add('locked');
                
                talentDiv.innerHTML = `
                    <div style="font-size: 16px; margin-bottom: 5px;">${talent.icon || '‚ùì'}</div>
                    <div style="font-size: 9px; line-height: 1.1;">${talent.name}</div>
                    <div class="talent-level">${currentLevel}/${talent.max}</div>
                `;
                
                // –¢—É–ª—Ç–∏–ø
                const desc = talent.desc[Math.min(currentLevel, talent.desc.length - 1)];
                let tooltipText = `${talent.name}\n\n${desc}\n\n–£—Ä–æ–≤–µ–Ω—å: ${currentLevel}/${talent.max}`;
                
                if (isRowLocked) {
                    tooltipText += `\n\nüîí –¢—Ä–µ–±—É–µ—Ç—Å—è ${rowData.requiredPoints} –æ—á–∫–æ–≤ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö`;
                }
                if (isTalentLocked) {
                    tooltipText += `\n\nüîí –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–∞–ª–∞–Ω—Ç–∞`;
                }
                
                talentDiv.setAttribute('data-tooltip', tooltipText);
                
                talentDiv.addEventListener('mouseenter', ui.showTooltip.bind(ui));
                talentDiv.addEventListener('mouseleave', ui.hideTooltip.bind(ui));
                
                if (!isRowLocked && !isTalentLocked) {
                    talentDiv.addEventListener('click', () => this.toggleTalent(talent.id, talent.max, talent.req, rowIndex));
                }
                
                rowDiv.appendChild(talentDiv);
            });
            
            talentBranch.appendChild(rowDiv);
        });
        
        container.appendChild(talentBranch);
        
        // –í–µ—Ç–∫–∏ –≤–µ—Ö
        milestoneData.forEach((milestoneBranch, branchIndex) => {
            const milestoneBranchDiv = document.createElement('div');
            milestoneBranchDiv.className = 'milestone-branch';
            milestoneBranchDiv.innerHTML = `<h3>${milestoneBranch.name}</h3>`;
            
            milestoneBranchDiv.setAttribute('data-tooltip', `${milestoneBranch.name}\n\n${milestoneBranch.desc}`);
            milestoneBranchDiv.addEventListener('mouseenter', ui.showTooltip.bind(ui));
            milestoneBranchDiv.addEventListener('mouseleave', ui.hideTooltip.bind(ui));
            
            const grid = document.createElement('div');
            grid.className = 'milestone-grid';
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 9x9
            for (let i = 0; i < 9; i++) {
                for (let j = 0; j < 9; j++) {
                    const cellDiv = document.createElement('div');
                    cellDiv.className = 'milestone';
                    cellDiv.dataset.position = `${i},${j}`;
                    
                    // –ò—â–µ–º –≤–µ—Ö—É –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    const milestone = milestoneBranch.milestones.find(m => 
                        m.position[0] === i && m.position[1] === j
                    );
                    
                    if (milestone) {
                        const isActive = this.selectedMilestones[milestone.id];
                        const isAvailable = this.isMilestoneAvailable(milestone.id, milestone.req);
                        
                        if (isActive) {
                            cellDiv.classList.add('active');
                            cellDiv.innerHTML = milestone.icon || '‚úì';
                        } else if (isAvailable) {
                            cellDiv.classList.add('available');
                            cellDiv.innerHTML = milestone.icon || '?';
                        } else {
                            cellDiv.classList.add('locked');
                            cellDiv.innerHTML = 'üîí';
                        }
                        
                        // –¢—É–ª—Ç–∏–ø
                        let tooltip = `${milestone.name}\n\n${milestone.desc}`;
                        if (!isAvailable && milestone.req.length > 0) {
                            const reqNames = milestone.req.map(req => this.getMilestoneName(req)).join(', ');
                            tooltip += `\n\nüîí –¢—Ä–µ–±—É–µ—Ç—Å—è: ${reqNames}`;
                        }
                        cellDiv.setAttribute('data-tooltip', tooltip);
                        
                        if (isAvailable && !isActive) {
                            cellDiv.addEventListener('click', () => this.toggleMilestone(milestone.id));
                        }
                    } else {
                        // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ (–Ω–µ—Ç –≤–µ—Ö–∏)
                        cellDiv.classList.add('empty');
                        cellDiv.innerHTML = '¬∑';
                        cellDiv.setAttribute('data-tooltip', `–ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ [${i},${j}]\n\n–ó–¥–µ—Å—å –Ω–µ—Ç –≤–µ—Ö–∏`);
                    }
                    
                    cellDiv.addEventListener('mouseenter', ui.showTooltip.bind(ui));
                    cellDiv.addEventListener('mouseleave', ui.hideTooltip.bind(ui));
                    
                    grid.appendChild(cellDiv);
                }
            }
            
            milestoneBranchDiv.appendChild(grid);
            container.appendChild(milestoneBranchDiv);
        });
    },

    isRowAvailable(rowIndex) {
        if (rowIndex === 0) return true; // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        
        const classData = classesData[this.currentClass];
        const rowData = classData.talents[rowIndex];
        
        if (!rowData.requiredPoints) return true;
        
        // –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        let pointsInPreviousRows = 0;
        for (let i = 0; i < rowIndex; i++) {
            const previousRow = classData.talents[i];
            previousRow.talents.forEach(talent => {
                pointsInPreviousRows += this.selectedTalents[talent.id] || 0;
            });
        }
        
        return pointsInPreviousRows >= rowData.requiredPoints;
    },

    isMilestoneAvailable(milestoneId, requirements) {
        // –ï—Å–ª–∏ –≤–µ—Ö–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (this.selectedMilestones[milestoneId]) return true;
        
        // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–µ—Ö–∏ (–±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π) –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (requirements.length === 0) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        return requirements.every(reqId => this.selectedMilestones[reqId]);
    },

    toggleTalent(talentId, maxLevel, requirements, rowIndex) {
        if (this.talentPoints >= milestonesData.settings.maxTalentPoints && !this.selectedTalents[talentId]) {
            alert(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—á–∫–æ–≤ —Ç–∞–ª–∞–Ω—Ç–æ–≤: ${milestonesData.settings.maxTalentPoints}`);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
        if (!this.isRowAvailable(rowIndex)) {
            const classData = classesData[this.currentClass];
            const rowData = classData.talents[rowIndex];
            alert(`–î–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–∞–ª–∞–Ω—Ç–æ–≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è ${rowData.requiredPoints} –æ—á–∫–æ–≤ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö!`);
            return;
        }
        
        const currentLevel = this.selectedTalents[talentId] || 0;
        const isLocked = requirements.length > 0 && !requirements.every(req => this.selectedTalents[req] > 0);
        
        if (isLocked) {
            alert('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∞–ª–∞–Ω—Ç–∞!');
            return;
        }
        
        if (currentLevel < maxLevel) {
            this.selectedTalents[talentId] = currentLevel + 1;
            this.talentPoints++;
        } else {
            delete this.selectedTalents[talentId];
            this.talentPoints--;
        }
        
        ui.updatePoints();
        this.renderBranches();
        this.updateBuildCode();
    },

    toggleMilestone(milestoneId) {
        if (this.milestonePoints >= milestonesData.settings.maxMilestonePoints && !this.selectedMilestones[milestoneId]) {
            alert(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—á–∫–æ–≤ –≤–µ—Ö: ${milestonesData.settings.maxMilestonePoints}`);
            return;
        }

        if (this.selectedMilestones[milestoneId]) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –≤–µ—Ö—É (–Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º—ã—Ö –≤–µ—Ö)
            if (this.canRemoveMilestone(milestoneId)) {
                delete this.selectedMilestones[milestoneId];
                this.milestonePoints--;
            } else {
                alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–µ—Ö—É! –ï—Å—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–µ –≤–µ—Ö–∏.');
                return;
            }
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ö—É
            this.selectedMilestones[milestoneId] = true;
            this.milestonePoints++;
        }

        ui.updatePoints();
        this.renderBranches();
        this.updateBuildCode();
    },

    canRemoveMilestone(milestoneId) {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–µ—Ö–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
        const allMilestones = [];
        if (milestonesData.classes[this.currentClass]) {
            milestonesData.classes[this.currentClass].forEach(branch => {
                allMilestones.push(...branch.milestones);
            });
        }
        
        // –ò—â–µ–º –≤–µ—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —ç—Ç—É –≤–µ—Ö—É
        const dependentMilestones = allMilestones.filter(m => 
            m.req.includes(milestoneId) && this.selectedMilestones[m.id]
        );
        
        return dependentMilestones.length === 0;
    },

    getMilestoneName(milestoneId) {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–µ—Ö–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
        const allMilestones = [];
        if (milestonesData.classes[this.currentClass]) {
            milestonesData.classes[this.currentClass].forEach(branch => {
                allMilestones.push(...branch.milestones);
            });
        }
        
        const milestone = allMilestones.find(m => m.id === milestoneId);
        return milestone ? milestone.name : milestoneId;
    },

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ –≤–µ—Ö
    resetAll() {
        if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –≤–µ—Ö–∏?')) {
            this.talentPoints = 0;
            this.milestonePoints = 0;
            this.selectedTalents = {};
            this.selectedMilestones = {};
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–µ—Ö–∏
            if (this.currentClass && milestonesData.classes[this.currentClass]) {
                milestonesData.classes[this.currentClass].forEach((branch) => {
                    branch.milestones.forEach(milestone => {
                        if (milestone.req.length === 0) {
                            this.selectedMilestones[milestone.id] = true;
                            this.milestonePoints++;
                        }
                    });
                });
            }
            
            ui.updatePoints();
            this.renderBranches();
            this.updateBuildCode();
        }
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –±–∏–ª–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É
    exportBuild() {
        if (!this.currentClass) {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å!');
            return;
        }

        const buildData = {
            class: this.currentClass,
            talents: this.selectedTalents,
            milestones: Object.keys(this.selectedMilestones).filter(id => id.startsWith(this.currentClass)),
            version: '1.0',
            timestamp: new Date().toISOString()
        };

        const buildString = btoa(JSON.stringify(buildData));
        document.getElementById('buildCode').value = buildString;
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(buildString).then(() => {
            alert('‚úÖ –ë–∏–ª–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            alert('‚úÖ –ë–∏–ª–¥ –≥–æ—Ç–æ–≤! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.');
        });
    },

    // –ò–º–ø–æ—Ä—Ç –±–∏–ª–¥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    importBuild() {
        const buildString = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –±–∏–ª–¥–∞:');
        if (!buildString) return;

        try {
            const buildData = JSON.parse(atob(buildString));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –∫–ª–∞—Å—Å
            if (!buildData.class || !buildData.talents || !buildData.milestones) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∏–ª–¥–∞');
            }

            // –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.currentClass !== buildData.class) {
                this.selectClass(buildData.class);
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∞–ª–∞–Ω—Ç—ã
            this.talentPoints = 0;
            this.selectedTalents = {};
            for (const [talentId, level] of Object.entries(buildData.talents)) {
                this.selectedTalents[talentId] = level;
                this.talentPoints += level;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ö–∏
            this.milestonePoints = 0;
            this.selectedMilestones = {};
            buildData.milestones.forEach(milestoneId => {
                this.selectedMilestones[milestoneId] = true;
                this.milestonePoints++;
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            ui.updatePoints();
            this.renderBranches();
            this.updateBuildCode();
            
            alert('‚úÖ –ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
            
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–¥–∞: ' + error.message);
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –±–∏–ª–¥–∞
    updateBuildCode() {
        if (!this.currentClass) return;

        const buildData = {
            class: this.currentClass,
            talents: this.selectedTalents,
            milestones: Object.keys(this.selectedMilestones).filter(id => id.startsWith(this.currentClass)),
            talentPoints: this.talentPoints,
            milestonePoints: this.milestonePoints,
            stats: this.getBuildStats()
        };

        document.getElementById('buildCode').value = JSON.stringify(buildData, null, 2);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–ª–¥–∞
    getBuildStats() {
        const stats = {
            totalTalentPoints: this.talentPoints,
            totalMilestonePoints: this.milestonePoints,
            talentCount: Object.keys(this.selectedTalents).length,
            milestoneCount: Object.keys(this.selectedMilestones).length,
            maxTalentPoints: milestonesData.settings.maxTalentPoints,
            maxMilestonePoints: milestonesData.settings.maxMilestonePoints
        };

        return stats;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –±–∏–ª–¥–∞
    validateBuild() {
        const errors = [];
        const stats = this.getBuildStats();

        if (stats.totalTalentPoints > stats.maxTalentPoints) {
            errors.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—á–∫–æ–≤ —Ç–∞–ª–∞–Ω—Ç–æ–≤: ${stats.totalTalentPoints}/${stats.maxTalentPoints}`);
        }

        if (stats.totalMilestonePoints > stats.maxMilestonePoints) {
            errors.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—á–∫–æ–≤ –≤–µ—Ö: ${stats.totalMilestonePoints}/${stats.maxMilestonePoints}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–∞–ª–∞–Ω—Ç–æ–≤
        for (const [talentId, level] of Object.entries(this.selectedTalents)) {
            const talent = this.findTalentById(talentId);
            if (talent) {
                if (level > talent.max) {
                    errors.push(`–¢–∞–ª–∞–Ω—Ç "${talent.name}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å`);
                }
                
                if (!this.areTalentRequirementsMet(talentId)) {
                    errors.push(`–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞–ª–∞–Ω—Ç–∞ "${talent.name}"`);
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–µ—Ö
        for (const milestoneId of Object.keys(this.selectedMilestones)) {
            if (!this.areMilestoneRequirementsMet(milestoneId)) {
                const milestone = this.findMilestoneById(milestoneId);
                if (milestone) {
                    errors.push(`–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ—Ö–∏ "${milestone.name}"`);
                }
            }
        }

        return {
            isValid: errors.length === 0,
            errors: errors,
            warnings: errors.length === 0 ? ['‚úÖ –ë–∏–ª–¥ –≤–∞–ª–∏–¥–µ–Ω!'] : []
        };
    },

    findTalentById(talentId) {
        if (!this.currentClass) return null;
        
        const classData = classesData[this.currentClass];
        for (const rowData of classData.talents) {
            for (const talent of rowData.talents) {
                if (talent.id === talentId) {
                    return talent;
                }
            }
        }
        return null;
    },

    findMilestoneById(milestoneId) {
        if (!this.currentClass || !milestonesData.classes[this.currentClass]) return null;
        
        for (const branch of milestonesData.classes[this.currentClass]) {
            for (const milestone of branch.milestones) {
                if (milestone.id === milestoneId) {
                    return milestone;
                }
            }
        }
        return null;
    },

    areTalentRequirementsMet(talentId) {
        const talent = this.findTalentById(talentId);
        if (!talent || !talent.req) return true;
        
        return talent.req.every(reqId => this.selectedTalents[reqId] > 0);
    },

    areMilestoneRequirementsMet(milestoneId) {
        const milestone = this.findMilestoneById(milestoneId);
        if (!milestone || !milestone.req) return true;
        
        return milestone.req.every(reqId => this.selectedMilestones[reqId]);
    }
};
